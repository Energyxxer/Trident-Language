@on compile
@require trident-util:type_checking

local var rangeToObj = function(value) {
    if(value is int_range || value is real_range) {
        if(value.min == value.max && value.min != null) return value.min
        var range = value
        eval value = {}
        if(range.min != null) eval value.min = range.min
        if(range.max != null) eval value.max = range.max
        return value
    }
    return value
}

define local class JSONSerializable {
    public serializeToJSON() {
        throw "serializeToJSON not implemented by " + type_definition.of(this)
    }

    public static fullySerialize(obj) {
        if(obj is JSONSerializable) {
            eval obj = obj.serializeToJSON()
        }

        if(obj is dictionary) {
            for(entry in obj) {
                eval obj[entry.key] = fullySerialize(entry.value)
            }
        } else if(obj is list) {
            for(var i = 0; i < obj.length; i++) {
                eval obj[i] = fullySerialize(obj[i])
            }
        }

        return obj
    }
}

define private class Distance
define private class Location
define private class Entity
define private class Effect
define private class SharedItem
define private class Enchantment
define private class SharedBlock
define private class Fluid
define private class Number

define private class Entity : JSONSerializable {
    var output = {}

    public type(type : resource) : Entity {
        if(type.isTag && !Tags.exists("entity", type)) throw "Given tag '" + type + "' does not exist as an entity tag"
        if(!type.isTag && !MinecraftTypes.exists("entity", type)) throw "Given type '" + type + "' does not exist as an entity type"
        eval this.output.type = type
        return this
    }
    public distance(distance : Distance) : Entity {
        eval output.distance = distance
        return this
    }
    public location(location : Location) : Entity {
        eval output.location = location
        return this
    }
    public effects(obj : Effect) : Entity {
        return effects([obj])
    }
    public effects(obj : list) : Entity {
        if(this.output.effects == null) eval this.output.effects = {}
        for(element in obj) {
            var effect : Effect = element
            var effectSerialized = JSONSerializable.fullySerialize(effect)
            eval this.output.effects[(string)effectSerialized.id] = effectSerialized
            eval effectSerialized.id = null
        }
        return this
    }
    public nbt(tag : nbt) : Entity {
        if(this.output.nbt == null) eval this.output.nbt = nbt<{}>
        eval this.output.nbt = this.output.nbt.merge(tag)
        return this
    }
    public isOnFire(bool : boolean) : Entity {
        if(this.output.flags == null) eval this.output.flags = {}
        eval this.output.flags.is_on_fire = bool
        return this
    }
    public isSneaking(bool : boolean) : Entity {
        if(this.output.flags == null) eval this.output.flags = {}
        eval this.output.flags.is_sneaking = bool
        return this
    }
    public isSprinting(bool : boolean) {
        if(this.output.flags == null) eval this.output.flags = {}
        eval this.output.flags.is_sprinting = bool
        return this
    }
    public isSwimming(bool : boolean) : Entity {
        if(this.output.flags == null) eval this.output.flags = {}
        eval this.output.flags.is_swimming = bool
        return this
    }
    public isBaby(bool : boolean) : Entity {
        if(this.output.flags == null) eval this.output.flags = {}
        eval this.output.flags.is_baby = bool
        return this
    }
    public equipment(slot : string, itm : item) : Entity {
        return equipment(slot, new SharedItem(itm))
    }
    public equipment(slot : string, itm : custom_item) : Entity {
        return equipment(slot, new SharedItem(itm))
    }
    public equipment(slot : string, itm : SharedItem) : Entity {
        if(this.output.equipment == null) eval this.output.equipment = {}
        eval assertOneOf(slot, ["mainhand", "offhand", "head", "chest", "legs", "feet"])
        eval this.output.equipment[slot] = itm
        return this
    }
    public team(teamName : string) : Entity {
        eval this.output.team = teamName
        return this
    }
    public level(value : int_range) : Entity {
        if(this.output.player == null) eval this.output.player = {}
        eval this.output.player.level = rangeToObj(value)
        return this
    }
    public gamemode(gamemode : string) : Entity {
        if(this.output.player == null) eval this.output.player = {}
        if(!MinecraftTypes.exists("gamemode", gamemode)) throw "Given type '" + gamemode + "' does not exist as a gamemode type"
        eval this.output.player.gamemode = gamemode
        return this
    }
    private static final var STAT_BASES : list = ["minecraft:custom", "minecraft:crafted", "minecraft:used", "minecraft:broken", "minecraft:mined", "minecraft:killed", "minecraft:picked_up", "minecraft:dropped", "minecraft:killed_by", "killedByTeam", "teamkill"]
    public matchStats(base : string, criterion : string, value : int_range) : Entity {
        eval assertOneOf(base, STAT_BASES)
        if(this.output.player == null) eval this.output.player = {}
        if(this.output.player.stats == null) eval this.output.player.stats = []
        eval this.output.player.stats.add({type: base, stat: criterion, value: rangeToObj(value)})
        return this
    }
    public matchRecipes(id : resource, value : boolean) : Entity {
        return matchRecipes((string) id, value)
    }
    public matchRecipes(id : string, value : boolean) : Entity {
        if(this.output.player == null) eval this.output.player = {}
        if(this.output.player.recipes == null) eval this.output.player.recipes = {}
        eval this.output.player.recipes[id] = value
        return this
    }
    public catType(texture : resource) : Entity {
        if(Project.getTargetVersion()[1] >= 19) throw "Entity property 'cat_type' is not supported for target versions 1.19 and later"
        eval this.output.catType = texture
        return this
    }
    public isInOpenWater(bool : boolean) : Entity {
        if(this.output.fishing_hook == null) eval this.output.fishing_hook = {}
        eval this.output.fishing_hook.in_open_water = bool
        return this
    }
    public blocksSetOnFire(blocksSetOnFire : int) : Entity {
        if(Project.getTargetVersion()[1] < 17) throw "Entity property 'lightning_bolt' is only supported for target versions 1.17 and later"
        if(this.output.lightning_bolt == null) eval this.output.lightning_bolt = {}
        eval output.lightning_bolt.blocks_set_on_fire = blocksSetOnFire
        return this
    }
    public entityStruck(entity : Entity) : Entity {
        if(Project.getTargetVersion()[1] < 17) throw "Entity property 'lightning_bolt' is only supported for target versions 1.17 and later"
        if(this.output.lightning_bolt == null) eval this.output.lightning_bolt = {}
        eval output.lightning_bolt.entity_struck = entity
        return this
    }
    public passenger(passenger : Entity) : Entity {
        if(Project.getTargetVersion()[1] < 17) throw "Entity property 'passenger' is only supported for target versions 1.17 and later"
        eval this.output.passenger = passenger
        return this
    }
    public lookingAt(entity : Entity) : Entity {
        if(Project.getTargetVersion()[1] < 17) throw "Entity property 'looking_at' is only supported for target versions 1.17 and later"
        if(this.output.player == null) eval this.output.player = {}
        eval this.output.player.looking_at = entity
        return this
    }
    public steppingOn(location : Location) : Entity {
        if(Project.getTargetVersion()[1] < 17) throw "Entity property 'stepping_on' is only supported for target versions 1.17 and later"
        eval this.output.stepping_on = location
        return this
    }
    public targetedEntity(entity : Entity) : Entity {
        if(Project.getTargetVersion()[1] < 16) throw "Entity property 'targeted_entity' is only supported for target versions 1.16 and later"
        eval this.output.targeted_entity = entity
        return this
    }
    public vehicle(entity : Entity) : Entity {
        if(Project.getTargetVersion()[1] < 16) throw "Entity property 'vehicle' is only supported for target versions 1.16 and later"
        eval this.output.vehicle = entity
        return this
    }

    public override serializeToJSON() {
        if(Project.getTargetVersion()[1] < 16 && output.player != null) {
            # From 1.16 onwards, player-related conditions belong inside a "player" sub object
            # This reverses that for pre-1.16 projects
            for(entry in output.player) {
                eval output[entry.key] = entry.value
            }
            eval output.player = null
        }
        return output
    }
}

define private class Distance : JSONSerializable {
    var output = {}

    public x(value : real_range) {
        eval this.output.x = rangeToObj(value)
        return this
    }

    public y(value : real_range) {
        eval this.output.y = rangeToObj(value)
        return this
    }

    public z(value : real_range) {
        eval this.output.z = rangeToObj(value)
        return this
    }

    public absolute(value : real_range) {
        eval this.output.absolute = rangeToObj(value)
        return this
    }

    public horizontal(value : real_range) {
        eval this.output.horizontal = rangeToObj(value)
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class Location : JSONSerializable {
    var output = {}

    public block(block : SharedBlock) {
        eval this.output.block = block
        return this
    }

    public fluid(fluid : Fluid) {
        eval this.output.fluid = fluid
        return this
    }

    public biome(biome : resource) {
        if(!MinecraftTypes.exists("biome", biome)) throw "Given type '" + biome + "' does not exist as a biome type"
        eval this.output.biome = biome
        return this
    }

    public light(value : int_range) {
        eval this.output.light = {
            "light": rangeToObj(value)
        }
        return this
    }

    public posX(value : real_range) {
        if(this.output.position == null) eval this.output.position = {}
        eval this.output.position.x = rangeToObj(value)
        return this
    }

    public posY(value : real_range) {
        if(this.output.position == null) eval this.output.position = {}
        eval this.output.position.y = rangeToObj(value)
        return this
    }

    public posZ(value : real_range) {
        if(this.output.position == null) eval this.output.position = {}
        eval this.output.position.z = rangeToObj(value)
        return this
    }

    public feature(feature : string) {
        eval feature = feature.toLowerCase()
        var valid = false
        for(def in MinecraftTypes.getDefinitionsForCategory("structure")) {
            if(def.key.toLowerCase() == feature) {
                eval valid = true
                break
            }
        }
        if(!valid) throw "Given type '" + feature + "' does not exist as a structure type"
        eval this.output.feature = feature
        return this
    }

    public dimension(dimension : resource) {
        if(!MinecraftTypes.exists("dimension", dimension)) throw "Given type '" + dimension + "' does not exist as a dimension type"
        eval this.output.dimension = dimension
        return this
    }

    public smokey(value : boolean) {
        if(Project.getTargetVersion()[1] < 16) throw "Location property 'smokey' is only supported for target versions 1.16 and up"
        eval this.output.smokey = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class Effect : JSONSerializable {
    var output = {}

    public new(type : resource) {
        if(!MinecraftTypes.exists("effect", type)) throw "Given type '" + type + "' does not exist as an effect type"
        eval output.id = type
    }

    public amplifier(value : int_range) {
        eval this.output.amplifier = rangeToObj(value)
        return this
    }

    public duration(ticks : int_range) {
        eval this.output.duration = rangeToObj(ticks)
        return this
    }

    public ambient(bool : boolean) {
        eval this.output.ambient = bool
        return this
    }

    public visible(bool : boolean) {
        eval this.output.visible = bool
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class SharedItem : JSONSerializable {
    var output = {}

    public new() {}

    public new(base : custom_item, allData : boolean?) {
        eval this.type(base.baseType)
        if(allData == true) {
            eval this.nbt(base.getItemTag())
        } else {
            eval this.nbt(base.getMatchingNBT())
        }
    }

    public new(base : item) {
        if(base.itemType.isTag) {
            eval this.tag(base.itemType)
        } else {
            eval this.type(base.itemType)
        }
        if(base.itemTag != null) {
            eval this.nbt(base.itemTag)
        }
    }

    public type(type : resource) {
        if(type.isTag) throw "Given location '" + type + "' is a tag, expected a type"
        if(!MinecraftTypes.exists("item", type)) throw "Given type '" + type + "' does not exist as an item type"
        if(this.output.items != null) {
            eval this.output.items.add(type)
        } else if(this.output.item != null) {
            if(Project.getTargetVersion()[1] < 17) throw "Multiple types in Shared.Block are only supported for target versions 1.17 and later"
            eval this.output.items = [this.output.item, type]
            eval this.output.item = null
        } else if(Project.getTargetVersion()[1] >= 17) {
            eval this.output.items = [type]
        } else {
            eval this.output.item = type
        }
        eval this.output.tag = null
        return this
    }

    public tag(type : resource) {
        if(!type.isTag) throw "Given location '" + type + "' is a type, expected a tag"
        if(!Tags.exists("item", type)) throw "Given tag '" + type + "' does not exist as an item tag"
        eval this.output.tag = ((string)type).substring(1)
        eval this.output.item = null
        return this
    }

    public durability(value : int_range) {
        eval this.output.durability = rangeToObj(value)
        return this
    }

    public count(value : int_range) {
        eval this.output.count = rangeToObj(value)
        return this
    }

    public potion(type : resource) {
        if(!MinecraftTypes.exists("potion", type)) throw "Given type '" + type + "' does not exist as a potion type"
        eval this.output.potion = type
        return this
    }

    public enchantments(obj : Enchantment) {
        return enchantments([obj])
    }
    public enchantments (enchantments : list) {
        if(this.output.enchantments == null) eval this.output.enchantments = []
        for(enchantment in enchantments) {
            eval this.output.enchantments.add((Enchantment)enchantment)
        }
        return this
    }

    public storedEnchantments(obj : Enchantment) {
        return storedEnchantments([obj])
    }
    public storedEnchantments(enchantments : list) {
        if(this.output.stored_enchantments == null) eval this.output.stored_enchantments = []
        for(enchantment in enchantments) {
            eval this.output.stored_enchantments.add((Enchantment)enchantment)
        }
        return this
    }

    public nbt(tag : nbt) {
        if(this.output.nbt == null) eval this.output.nbt = nbt<{}>
        eval this.output.nbt = this.output.nbt.merge(tag)
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class Enchantment : JSONSerializable {
    var output = {}

    public new(base : resource?) {
        if(base != null) eval this.id(base)
    }

    public id(type : resource) {
        if(!MinecraftTypes.exists("enchantment", type)) throw "Given type '" + type + "' does not exist as an enchantment type"
        eval this.output.enchantment = type
        return this
    }

    public levels(value : int_range) {
        eval this.output.levels = rangeToObj(value)
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class SharedBlock : JSONSerializable {
    var output = {}

    public new(base : block?) {
        if(base != null) {
            if(base.blockType.isTag) {
                eval this.tag(base.blockType)
            } else {
                eval this.type(base.blockType)
            }
            var state = base.blockState
            if(state != null) {
                for(entry in state) {
                    eval this.state(entry.key, entry.value)
                }
            }
            if(base.blockTag != null) {
                eval this.nbt(base.blockTag)
            }
        }
    }

    public type(type : resource) {
        if(type.isTag) throw "Given location '" + type + "' is a tag, expected a type"
        if(!MinecraftTypes.exists("block", type)) throw "Given type '" + type + "' does not exist as a block type"

        if(this.output.blocks != null) {
            eval this.output.blocks.add(type)
        } else if(this.output.block != null) {
            if(Project.getTargetVersion()[1] < 17) throw "Multiple types in Shared.Block are only supported for target versions 1.17 and later"
            eval this.output.blocks = [this.output.block, type]
            eval this.output.block = null
        } else if(Project.getTargetVersion()[1] >= 17) {
            eval this.output.blocks = [type]
        } else {
            eval this.output.block = type
        }
        eval this.output.tag = null
        return this
    }

    public tag(type : resource) {
        if(!type.isTag) throw "Given location '" + type + "' is a type, expected a tag"
        if(!Tags.exists("block", type)) throw "Given tag '" + type + "' does not exist as a block tag"
        eval this.output.tag = ((string)type).substring(1)
        eval this.output.block = null
        return this
    }

    public state(key : string, value : int_range) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = rangeToObj(value)
        return this
    }

    public state(key : string, value : boolean) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = value
        return this
    }

    public state(key : string, value : string) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = value
        return this
    }

    public nbt(tag : nbt) {
        if(this.output.nbt == null) eval this.output.nbt = nbt<{}>
        eval this.output.nbt = this.output.nbt.merge(tag)
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class Fluid : JSONSerializable {
    var output = {}

    public new(base : resource?) {
        if(base != null) {
            if(base.isTag) {
                eval this.tag(base)
            } else {
                eval this.type(base)
            }
        }
    }

    public type(type : resource) {
        if(type.isTag) throw "Given location '" + type + "' is a tag, expected a type"
        if(!MinecraftTypes.exists("fluid", type)) throw "Given type '" + type + "' does not exist as a fluid type"
        eval this.output.fluid = type
        eval this.output.tag = null
        return this
    }

    public tag(type : resource) {
        if(!type.isTag) throw "Given location '" + type + "' is a type, expected a tag"
        if(!Tags.exists("fluid", type)) throw "Given tag '" + type + "' does not exist as a fluid tag"
        eval this.output.tag = ((string)type).substring(1)
        eval this.output.fluid = null
        return this
    }

    public state(key : string, value : int_range) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = rangeToObj(value)
        return this
    }
    public state(key : string, value : boolean) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = value
        return this
    }
    public state(key : string, value : string) {
        if(this.output.state == null) eval this.output.state = {}
        eval this.output.state[key] = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class Number : JSONSerializable {
    var output

    private new(output) {
        eval this.output = output
    }

    public static constant(value : real) {
        return value
    }

    public static uniform(min, max) {
        if(Project.getTargetVersion()[1] < 16) throw "Number Providers are only supported for target versions 1.16 and later"
        if(!(min is int || min is real || min is Number)) {
            throw "Expected int, real or Shared.Number for min, instead got " + type_definition.of(min)
        }
        if(!(max is int || max is real || max is Number)) {
            throw "Expected int, real or Shared.Number for max, instead got " + type_definition.of(max)
        }
        return new Number({"type": "uniform", "min": min, "max": max})
    }

    public static binomial(n, p) {
        if(Project.getTargetVersion()[1] < 16) throw "Number Providers are only supported for target versions 1.16 and later"
        if(!(n is int || n is Number)) {
            throw "Expected int or Shared.Number for n, instead got " + type_definition.of(n)
        }
        if(!(p is real || p is Number)) {
            throw "Expected real or Shared.Number for p, instead got " + type_definition.of(p)
        }
        return new Number({"type": "binomial", "n": n, "p": p})
    }

    public static scoreFixed(uuid : uuid, objective : string, scale : real?) {
        if(Project.getTargetVersion()[1] < 17) throw "Score Number Providers are only supported for target versions 1.17 or later"
        return scoreFixed((string) uuid, objective, scale)
    }

    public static scoreFixed(name : string, objective : string, scale : real?) {
        if(Project.getTargetVersion()[1] < 17) throw "Score Number Providers are only supported for target versions 1.17 or later"
        return new Number({"type": "score", "target": {"type": "fixed", "name": name}, "score": objective, "scale": scale})
    }

    public static scoreContext(target : string, objective : string, scale : real?) {
        if(Project.getTargetVersion()[1] < 17) throw "Score number providers are only supported for target versions 1.17 or later"
        return new Number({"type": "score", "target": target, "score": objective, "scale": scale})
    }
}

define static final class Shared {
    public static final var Distance = Distance
    public static final var Location = Location
    public static final var Entity = Entity
    public static final var Effect = Effect
    public static final var Item = SharedItem
    public static final var Enchantment = Enchantment
    public static final var Block = SharedBlock
    public static final var Fluid = Fluid
    public static final var Number = Number

    # For backwards compatibility:
    public static Distance() : Distance {return new Distance()}
    public static Location() : Location {return new Location()}
    public static Entity() : Entity {return new Entity()}
    public static Effect(type : resource) : Effect {return new Effect(type)}
    public static Item() : SharedItem {return new SharedItem()}
    public static Item(base : item) : SharedItem {return new SharedItem(base)}
    public static Item(base : custom_item, allData : boolean?) : SharedItem {return new SharedItem(base, allData)}
    public static Enchantment(base : resource?) : Enchantment {return new Enchantment(base)}
    public static Block(base : block?) : SharedBlock {return new SharedBlock(base)}
    public static Fluid(base : resource?) : Fluid {return new Fluid(base)}
}
